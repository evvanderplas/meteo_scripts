#! /usr/bin/env python

'''
A simple script that opens a grib file and replaces its content with a field generated by some function in (x,y)
'''


import os,sys,glob
import numpy as np
import pygrib
#from tools import gribtools


## This may not be necessary, and time consuming, no longer used
if 0: # create a map
    pwidth = 4.e5
    pheight = 4.e5

    lmap = Basemap(
        projection='lcc', # 'lcc' is Lambert Conformal Conic projection
        resolution=res,
        lat_0=52.1,lon_0=4.7, # De Bilt
        lat_1=45.,lat_2=55.,
        width=pwidth, height=pheight
        )
    
    xa,ya   = lmap(4.878867,52.375345) # location of NL148

####################################################################
#
# open file, create a field on its grid, insert into new file
#
####################################################################

reffile = 'harmonie_400x400.grb'
if 1: # open a harmonie grib file:

    grbs = pygrib.open(reffile)
    
    grb = grbs[1] # precip
    w = grb.values
    grbs.close()
    if 1:
        print grb
        print w.shape

        # get some feedback on where to put the self-made structure:
        lats,lons = grb.latlons()
        i,j = 280,240
        print lats[i,j],lons[i,j]



    if 1:
        # use shape of grib field:
        m,n = w.shape

        # make a grid as function domain
        delta = 1
        x = np.arange(.0, m, delta)
        y = np.arange(.0, n, delta)
        X, Y = np.meshgrid(x, y)
        
        # define eg Gaussian field using center xa,ya, and stdeviation sigx,sigy
        xa,ya  = 240,280
        #xa,ya  = 250,280
        #xa,ya  = 260,280
        #xa,ya  = 315,280
        #xa,ya  = 340,280
        sigx,sigy = 40,40
        #sigx,sigy = 70,40
        
        # Gaussian:
        values = 30 * np.exp( -(((X-xa)/sigx)**2 + ((Y-ya)/sigy)**2)) 
        print "Max, min and mean of new values:", values.max(),values.min(),values.mean();

        # plot several points/patches:
        xa,ya = [220,230,240,250,260],[290,260,280,300,270]
        sigx,sigy = 10,10
        values = np.zeros(w.shape)
        for xs,ys in zip(xa,ya):
            values +=  40 * np.exp( -(((X-xs)/sigx)**2 + ((Y-ys)/sigy)**2))

        if 0: contourf(X, Y, values) # in ipython

        if 0: # debug offline: plot field

            import matplotlib
            import matplotlib.pyplot as plt

            plt.figure()
            CS = plt.contourf(X, Y, values)
            plt.title('Simple storm')
            plt.show()

            sys.exit(1)


if 1: # write the new field to a grib file, based on the grib message used to create the grid etc

    outdir = './'
    adfile = os.path.join(outdir,'test_academic_grib.grb')

    ####### make a new grib file
    newgrib = open(adfile,'wb')
    # 
    grb.values = values
    msg = grb.tostring()
    newgrib.write(msg)
    # close files
    newgrib.close()

    print "Created ",adfile
